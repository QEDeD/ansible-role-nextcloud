# SPDX-FileCopyrightText: 2023 - 2024 Slavi Pantaleev
# SPDX-FileCopyrightText: 2025 Suguru Hirahara
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
- name: Check existence of Nextcloud systemd service
  ansible.builtin.stat:
    path: "{{ devture_systemd_docker_base_systemd_path }}/{{ nextcloud_identifier }}-server.service"
  register: nextcloud_service_stat

- name: Uninstall Nextcloud systemd services and files
  when: nextcloud_service_stat.stat.exists | bool
  block:
    - name: Ensure Nextcloud systemd services are stopped
      when: item.when | bool
      ansible.builtin.service:
        name: "{{ nextcloud_identifier }}-{{ item.service }}"
        state: stopped
        enabled: false
        daemon_reload: true
      with_items:
        - { "service": server.service, "when": true }
        - { "service": cron.service, "when": true }
        - { "service": cron.timer, "when": true }
        - { "service": app-update.service, "when": "{{ nextcloud_app_autoupdate_enabled }}" }
        - { "service": app-update.timer, "when": "{{ nextcloud_app_autoupdate_enabled }}" }

    - name: Ensure Nextcloud systemd services do not exist
      ansible.builtin.file:
        path: "{{ devture_systemd_docker_base_systemd_path }}/{{ nextcloud_identifier }}-{{ item }}"
        state: absent
      with_items:
        - server.service
        - cron.service
        - cron.timer
        - app-update.service
        - app-update.timer

    - name: Ensure Nextcloud support files do not exist
      ansible.builtin.file:
        path: "{{ nextcloud_base_path }}/{{ item }}"
        state: absent
      with_items:
        - env
        - labels

    - name: Ensure Nextcloud image source files path does not exist
      ansible.builtin.file:
        path: "{{ nextcloud_customized_container_src_path }}"
        state: absent

    - name: Ensure Nextcloud Redis session ini file does not exist
      when: nextcloud_redis_is_configured | bool
      ansible.builtin.file:
        path: "{{ nextcloud_redis_session_ini_path }}"
        state: absent

    - name: Ensure Nextcloud local data path does not exist if empty
      ansible.builtin.command:
        cmd: "rmdir {{ nextcloud_data_path }}"
      register: nextcloud_data_path_deletion_result
      changed_when: nextcloud_data_path_deletion_result.rc == 0

    - name: Ensure Nextcloud base path does not exist if empty
      ansible.builtin.command:
        cmd: "rmdir {{ nextcloud_base_path }}"
      register: nextcloud_base_path_deletion_result
      changed_when: nextcloud_base_path_deletion_result.rc == 0

    - name: Ensure Nextcloud container network does not exist via community.docker.docker_network
      when: devture_systemd_docker_base_container_network_creation_method == 'ansible-module'
      community.docker.docker_network:
        name: "{{ nextcloud_container_network }}"
        state: absent

    - name: Ensure Nextcloud container network does not exist via ansible.builtin.command
      when: devture_systemd_docker_base_container_network_creation_method == 'command'
      ansible.builtin.command:
        cmd: >-
          {{ devture_systemd_docker_base_host_command_docker }} network rm
          {{ nextcloud_container_network }}
      register: network_deletion_result
      changed_when: nextcloud_container_network in network_deletion_result.stdout

- name: Check existence of Nextcloud local data path
  ansible.builtin.stat:
    path: "{{ nextcloud_data_path }}"
  register: nextcloud_data_path_stat

# We just want to notify the user. Deleting data is too destructive.
- name: Notify if Nextcloud local data remains
  when: nextcloud_data_path_stat.stat.exists | bool
  ansible.builtin.set_fact:
    devture_playbook_runtime_messages_list: |
      {{
        devture_playbook_runtime_messages_list | default([])
        +
        [
          "Note: As the local Nextcloud instance has been removed, some old data remains in `" + nextcloud_data_path + "`. Feel free to delete it."
        ]
      }}
